#+TITLE: TPM for OpenPGP
#+PROPERTY: header-args :tangle yes

This crate implements bindings so that TPM chips can be used with
OpenPGP applications.

Sample usage:

First, we assume that we'll use TPM 2 simulator package. If you want
to test on real device set ~TCTI~ to ~device:/dev/tpmrm0~.

#+begin_src sh
  tpm_server &
  
  sleep 5
  
  tpm2_startup -c -T mssim
  
  TCTI=mssim:
  PATH=$PATH:./target/debug
#+end_src

To generate a number of random bytes using the specified TPM:

#+begin_src sh :var TCTI="device:/dev/tpmrm0" PATH="./target/debug" :exports both
draw-bytes --tcti $TCTI
#+end_src

#+RESULTS:
: 46d2f84712cefc51c8bc124354f7daa0fecd2f6066963ab15b6b50a63248dd90

** Creating persistent keys

This crate uses descriptive documents for configuring key properties.

The following configuration creates RSA-2048 signing key and persists
it at the handle ~0x01000027~. ~123~ is used as a sample auth value (PIN).

#+BEGIN_SRC yaml :tangle key.yml
spec:
  provider:
    tpm:
      tcti: "mssim:"
      handle: 0x81000027
  algo:
    pk: RSA
    digest: SHA-256
    bits: 2048
  capabilities:
    - sign
  auth: 123
#+END_SRC

The key description (~key.yml~) is being read by the ~create-key~
binary that persists that key:

#+BEGIN_SRC sh
create-key -f key.yml
#+END_SRC

And the same file is used to retrieve it again using ~get-key~ binary:

#+BEGIN_SRC sh
get-key -f key.yml
#+END_SRC

* Work plan

** Signing and decryption using RSA keys [1/5]
  - [X] Creating new RSA keys and persisting them in TPM memory
  - [ ] Using non-persistent RSA keys (that don't use up TPM memory)
  - [ ] Importing RSA private keys to TPM (for already existing keys)
  - [ ] Signing using RSA keys in the TPM
  - [ ] Decryption using RSA keys in the TPM

** Support for Elliptic Curve algorithms [/]
  - [ ] Creating new EC keys and persisting them in TPM memory
  - [ ] Using non-persistent EC keys (that don't use up TPM memory)
  - [ ] Importing EC private keys to TPM (for already existing keys)
  - [ ] Signing using EC keys in the TPM
  - [ ] Decryption using EC keys in the TPM

** Key migration support [/]
  - [ ] Export of TPM encryption key
  - [ ] Wrapping user's private key using TPM encryption key
  - [ ] Import of the wrapper private key to the TPM chip
  - [ ] PR to the upstream rust-tss-esapi crate

** Design and implementation of private key store crate [/]
  - [ ] Implementation of Sequoia's Decryptor and Signer traits for TPM keys
  - [ ] API for managing TPM keys
  - [ ] API for key migration

** Test harness using a TPM simulator [/]
  - [ ] Integration tests for creating, importing keys
  - [ ] Test cases for encryption (using Sequoia) and decryption (using TPM crate)
  - [ ] Tests for key migration

** Extending Sequoia's CLI to support private key store [/]
  - [ ] Extension to the CLI to allow specifying the location of the private key store
  - [ ] Modification to the sourec code not to rely on software private keys
 
** Documentation for tools and the API [/]
  - [ ] Making sure all functions and items are documented
  - [ ] Including README and end-user documentation on how to use the project
  - [ ] Adding best practices document
